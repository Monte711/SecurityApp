# Enhanced UECP Agent - Full System Data Collection
# –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö

param(
    [int]$IntervalSeconds = 60,
    [string]$ApiUrl = "http://localhost:8000/ingest",
    [string]$AgentId = "$env:COMPUTERNAME-enhanced",
    [string]$CollectionLevel = "detailed"  # minimal, standard, detailed
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
$agentConfig = @{
    agent_id = $AgentId
    agent_version = "1.0.0"
    collection_level = $CollectionLevel
    api_url = $ApiUrl
    interval = $IntervalSeconds
}

Write-Host "üöÄ –ó–∞–ø—É—Å–∫ Enhanced UECP Agent..." -ForegroundColor Green
Write-Host "üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Agent ID: $($agentConfig.agent_id)" -ForegroundColor Gray
Write-Host "  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: $($agentConfig.interval) —Å–µ–∫" -ForegroundColor Gray
Write-Host "  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞: $($agentConfig.collection_level)" -ForegroundColor Gray
Write-Host "  ‚Ä¢ API URL: $($agentConfig.api_url)" -ForegroundColor Gray

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function Get-SystemInfo {
    try {
        $os = Get-CimInstance Win32_OperatingSystem
        $cs = Get-CimInstance Win32_ComputerSystem
        $proc = Get-CimInstance Win32_Processor | Select-Object -First 1
        
        return @{
            hostname = $env:COMPUTERNAME
            domain = $env:USERDOMAIN
            username = $env:USERNAME
            os_name = $os.Caption
            os_version = $os.Version
            os_build = $os.BuildNumber
            architecture = $os.OSArchitecture
            total_memory_gb = [math]::Round($cs.TotalPhysicalMemory / 1GB, 2)
            cpu_name = $proc.Name
            cpu_cores = $proc.NumberOfCores
            cpu_threads = $proc.NumberOfLogicalProcessors
            last_boot = $os.LastBootUpTime
            timezone = (Get-TimeZone).Id
        }
    } catch {
        Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: $_" -ForegroundColor Yellow
        return @{ error = $_.Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
function Get-ProcessInfo {
    param([string]$level = "standard")
    
    try {
        $processes = Get-Process | Where-Object { $_.ProcessName -ne "Idle" }
        
        if ($level -eq "minimal") {
            return @{
                total_processes = $processes.Count
                unique_processes = ($processes | Group-Object ProcessName).Count
            }
        } elseif ($level -eq "standard") {
            $topProcesses = $processes | Sort-Object WorkingSet64 -Descending | Select-Object -First 10
            return @{
                total_processes = $processes.Count
                unique_processes = ($processes | Group-Object ProcessName).Count
                top_memory_processes = $topProcesses | ForEach-Object {
                    @{
                        name = $_.ProcessName
                        pid = $_.Id
                        memory_mb = [math]::Round($_.WorkingSet64 / 1MB, 2)
                        cpu_time = $_.TotalProcessorTime.TotalSeconds
                    }
                }
            }
        } else {  # detailed
            return @{
                total_processes = $processes.Count
                unique_processes = ($processes | Group-Object ProcessName).Count
                all_processes = $processes | ForEach-Object {
                    @{
                        name = $_.ProcessName
                        pid = $_.Id
                        memory_mb = [math]::Round($_.WorkingSet64 / 1MB, 2)
                        cpu_time = $_.TotalProcessorTime.TotalSeconds
                        start_time = $_.StartTime
                        path = $_.Path
                        company = $_.Company
                    }
                }
            }
        }
    } catch {
        Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: $_" -ForegroundColor Yellow
        return @{ error = $_.Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function Get-NetworkInfo {
    param([string]$level = "standard")
    
    try {
        $adapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" }
        $connections = Get-NetTCPConnection | Where-Object { $_.State -eq "Established" }
        
        if ($level -eq "minimal") {
            return @{
                active_adapters = $adapters.Count
                active_connections = $connections.Count
            }
        } else {
            return @{
                active_adapters = $adapters.Count
                active_connections = $connections.Count
                adapters = $adapters | ForEach-Object {
                    @{
                        name = $_.Name
                        interface_description = $_.InterfaceDescription
                        link_speed = $_.LinkSpeed
                        mac_address = $_.MacAddress
                    }
                }
                ip_addresses = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq "IPv4" -and $_.IPAddress -ne "127.0.0.1" }).IPAddress
                connections_by_state = $connections | Group-Object State | ForEach-Object {
                    @{ state = $_.Name; count = $_.Count }
                }
            }
        }
    } catch {
        Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: $_" -ForegroundColor Yellow
        return @{ error = $_.Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function Get-SecurityInfo {
    try {
        $antivirus = Get-CimInstance -Namespace "root\SecurityCenter2" -ClassName "AntiVirusProduct" -ErrorAction SilentlyContinue
        $firewall = Get-NetFirewallProfile
        
        return @{
            windows_defender = @{
                enabled = (Get-MpComputerStatus -ErrorAction SilentlyContinue).AntivirusEnabled
                real_time_protection = (Get-MpComputerStatus -ErrorAction SilentlyContinue).RealTimeProtectionEnabled
                signature_age = (Get-MpComputerStatus -ErrorAction SilentlyContinue).AntispywareSignatureAge
            }
            antivirus_products = $antivirus | ForEach-Object {
                @{
                    name = $_.displayName
                    state = $_.productState
                }
            }
            firewall_profiles = $firewall | ForEach-Object {
                @{
                    profile = $_.Name
                    enabled = $_.Enabled
                    default_inbound_action = $_.DefaultInboundAction
                    default_outbound_action = $_.DefaultOutboundAction
                }
            }
            uac_enabled = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -ErrorAction SilentlyContinue).EnableLUA -eq 1
        }
    } catch {
        Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $_" -ForegroundColor Yellow
        return @{ error = $_.Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
function Get-DiskInfo {
    try {
        $disks = Get-CimInstance Win32_LogicalDisk | Where-Object { $_.DriveType -eq 3 }
        
        return @{
            disk_count = $disks.Count
            disks = $disks | ForEach-Object {
                @{
                    drive = $_.DeviceID
                    total_gb = [math]::Round($_.Size / 1GB, 2)
                    free_gb = [math]::Round($_.FreeSpace / 1GB, 2)
                    used_gb = [math]::Round(($_.Size - $_.FreeSpace) / 1GB, 2)
                    free_percent = [math]::Round(($_.FreeSpace / $_.Size) * 100, 2)
                }
            }
        }
    } catch {
        Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: $_" -ForegroundColor Yellow
        return @{ error = $_.Message }
    }
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function Send-EnhancedData {
    try {
        Write-Host "üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        $systemInfo = Get-SystemInfo
        $processInfo = Get-ProcessInfo -level $CollectionLevel
        $networkInfo = Get-NetworkInfo -level $CollectionLevel
        $securityInfo = Get-SecurityInfo
        $diskInfo = Get-DiskInfo
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        $event = @{
            event_id = [System.Guid]::NewGuid().ToString()
            event_type = "enhanced_system_telemetry"
            timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            collection_level = $CollectionLevel
            host = @{
                host_id = $env:COMPUTERNAME
                hostname = $systemInfo.hostname
                domain = $systemInfo.domain
                ip_address = "127.0.0.1"  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                os = $systemInfo.os_name
                architecture = $systemInfo.architecture
                total_memory_gb = $systemInfo.total_memory_gb
                cpu_info = @{
                    name = $systemInfo.cpu_name
                    cores = $systemInfo.cpu_cores
                    threads = $systemInfo.cpu_threads
                }
            }
            agent = @{
                agent_id = $AgentId
                agent_version = $agentConfig.agent_version
                collection_level = $CollectionLevel
            }
            telemetry = @{
                system = $systemInfo
                processes = $processInfo
                network = $networkInfo
                security = $securityInfo
                storage = $diskInfo
                performance = @{
                    cpu_usage = (Get-Counter "\Processor(_Total)\% Processor Time" -SampleInterval 1 -MaxSamples 1).CounterSamples.CookedValue
                    memory_usage_percent = [math]::Round(((Get-CimInstance Win32_OperatingSystem).TotalVisibleMemorySize - (Get-CimInstance Win32_OperatingSystem).FreePhysicalMemory) / (Get-CimInstance Win32_OperatingSystem).TotalVisibleMemorySize * 100, 2)
                }
            }
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if ($networkInfo.ip_addresses -and $networkInfo.ip_addresses.Count -gt 0) {
            $event.host.ip_address = $networkInfo.ip_addresses[0]
        }
        
        $jsonBody = $event | ConvertTo-Json -Depth 10
        
        Write-Host "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri $ApiUrl -Method POST -ContentType "application/json" -Body $jsonBody -TimeoutSec 30
        
        Write-Host "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! Event ID: $($response.event_id)" -ForegroundColor Green
        Write-Host "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -ForegroundColor White
        Write-Host "  ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: $($processInfo.total_processes)" -ForegroundColor Gray
        Write-Host "  ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã: $($networkInfo.active_adapters)" -ForegroundColor Gray
        Write-Host "  ‚Ä¢ –î–∏—Å–∫–∏: $($diskInfo.disk_count)" -ForegroundColor Gray
        
        return $true
        
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $_" -ForegroundColor Red
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..." -ForegroundColor Cyan
try {
    $healthCheck = Invoke-RestMethod -Uri "$($ApiUrl.Replace('/ingest', '/health'))" -TimeoutSec 10
    Write-Host "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∞–≥–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É" -ForegroundColor Yellow
}

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞
Write-Host "`nüîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Green
Write-Host "‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏`n" -ForegroundColor Yellow

$successCount = 0
$errorCount = 0

while ($true) {
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] üöÄ –¶–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
    
    if (Send-EnhancedData) {
        $successCount++
    } else {
        $errorCount++
    }
    
    Write-Host "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞: ‚úÖ $successCount —É—Å–ø–µ—à–Ω–æ, ‚ùå $errorCount –æ—à–∏–±–æ–∫" -ForegroundColor White
    Write-Host "‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ $IntervalSeconds —Å–µ–∫—É–Ω–¥...`n" -ForegroundColor Gray
    
    Start-Sleep -Seconds $IntervalSeconds
}
