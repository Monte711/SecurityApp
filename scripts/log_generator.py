#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ ingest API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import asyncio
import json
import random
import time
from datetime import datetime, timezone
from typing import List, Dict, Any
import aiohttp
import argparse
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000/ingest/security"
DEFAULT_RATE = 5  # —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
DEFAULT_DURATION = 60  # —Å–µ–∫—É–Ω–¥

# –®–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
THREAT_SOURCES = [
    "zero-day.cz",
    "cve.mitre.org", 
    "security-scanner",
    "antivirus-engine",
    "network-monitor",
    "file-analyzer",
    "malware-detector",
    "vulnerability-scanner"
]

THREAT_TYPES = [
    "exploit",
    "malware", 
    "phishing",
    "vulnerability",
    "intrusion",
    "ransomware",
    "trojan",
    "backdoor",
    "rootkit",
    "botnet"
]

SEVERITY_LEVELS = [
    {"level": "critical", "weight": 5},
    {"level": "high", "weight": 15}, 
    {"level": "medium", "weight": 40},
    {"level": "low", "weight": 30},
    {"level": "info", "weight": 10}
]

# –®–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
THREAT_DESCRIPTIONS = {
    "exploit": [
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å CVE-2025-{:04d}",
        "–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ {service}",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–∫—Å–ø–ª–æ–π—Ç –Ω—É–ª–µ–≤–æ–≥–æ –¥–Ω—è –ø—Ä–æ—Ç–∏–≤ {service}",
        "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞"
    ],
    "malware": [
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û: {malware_name}",
        "–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ç—Ä–æ—è–Ω—Å–∫–∏–π –∫–æ–Ω—å –≤ —Ñ–∞–π–ª–µ {file_name}",
        "–ù–∞–π–¥–µ–Ω –≤–∏—Ä—É—Å —Å–µ–º–µ–π—Å—Ç–≤–∞ {family_name}",
        "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}"
    ],
    "phishing": [
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤–∞—è –∞—Ç–∞–∫–∞ —Å –¥–æ–º–µ–Ω–∞ {domain}",
        "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender}",
        "–ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∞–∂–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ–ª—å–Ω—ã–π —Å–∞–π—Ç",
        "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
    ],
    "vulnerability": [
        "–ù–∞–π–¥–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ {system}",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å CVE-2025-{:04d}",
        "–í—ã—è–≤–ª–µ–Ω —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service}"
    ],
    "intrusion": [
        "–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å IP {ip_address}",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É {port}",
        "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –ø–∞—Ä–æ–ª—è",
        "–ê–Ω–æ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}"
    ]
}

class ThreatEventGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, api_url: str = API_URL):
        self.api_url = api_url
        self.session = None
        self.event_counter = 0
        
    async def __aenter__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    def generate_event(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        self.event_counter += 1
        
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        source = random.choice(THREAT_SOURCES)
        threat_type = random.choice(THREAT_TYPES)
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å –≤–µ—Å–∞–º–∏
        severity = random.choices(
            [s["level"] for s in SEVERITY_LEVELS],
            weights=[s["weight"] for s in SEVERITY_LEVELS]
        )[0]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        description_templates = THREAT_DESCRIPTIONS.get(threat_type, ["–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ —Ç–∏–ø–∞ {threat_type}"])
        description_template = random.choice(description_templates)
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = description_template.format(
            service=random.choice(["Apache", "nginx", "IIS", "MySQL", "PostgreSQL", "Redis"]),
            malware_name=f"Trojan.Win32.{random.choice(['Backdoor', 'Keylogger', 'Spyware'])}.{random.randint(1000, 9999)}",
            file_name=f"suspicious_{random.randint(100, 999)}.exe",
            family_name=random.choice(["Zeus", "Emotet", "TrickBot", "Ryuk", "Maze"]),
            process_name=f"malicious_{random.randint(100, 999)}.exe",
            domain=f"phishing-{random.randint(100, 999)}.com",
            sender=f"fake-{random.randint(100, 999)}@suspicious.com",
            system=random.choice(["Windows Server", "Linux", "Docker", "Kubernetes"]),
            username=f"user{random.randint(1, 100)}",
            ip_address=f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}",
            port=random.choice([22, 80, 443, 3389, 445, 135]),
            threat_type=threat_type
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        event = {
            "event_id": f"gen-{self.event_counter:06d}-{int(time.time())}",
            "timestamp": datetime.now(timezone.utc).isoformat().replace("+00:00", "Z"),
            "source": source,
            "threat_type": threat_type,
            "description": description,
            "severity": severity,
            "metadata": {
                "generated": True,
                "generator_version": "1.0.0",
                "event_number": self.event_counter
            }
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≥—Ä–æ–∑—ã
        if threat_type in ["exploit", "vulnerability"]:
            event["cve_id"] = f"CVE-2025-{random.randint(1000, 9999)}"
            event["cvss_score"] = round(random.uniform(1.0, 10.0), 1)
            
        elif threat_type == "malware":
            event["malware_family"] = random.choice(["Zeus", "Emotet", "TrickBot", "Ryuk"])
            event["file_hash"] = f"sha256:{random.randint(10**63, 10**64-1):064x}"
            
        elif threat_type == "intrusion":
            event["source_ip"] = f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}"
            event["target_port"] = random.choice([22, 80, 443, 3389, 445])
            
        return event
    
    async def send_event(self, event: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ API"""
        try:
            async with self.session.post(
                self.api_url,
                json=event,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                if response.status == 200:
                    response_data = await response.json()
                    print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event['event_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response_data.get('status', 'unknown')}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è {event['event_id']}: {response.status} - {error_text}")
                    return False
                    
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è {event['event_id']}")
            return False
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è {event['event_id']}: {e}")
            return False
    
    async def generate_stream(self, rate: float, duration: int, burst_mode: bool = False):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            rate: —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
            duration: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö  
            burst_mode: —Ä–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π:")
        print(f"   üìä –ß–∞—Å—Ç–æ—Ç–∞: {rate} —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫")
        print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫")
        print(f"   üì¶ –†–µ–∂–∏–º: {'–ø–∞–∫–µ—Ç–Ω—ã–π' if burst_mode else '–ø–æ—Ç–æ–∫–æ–≤—ã–π'}")
        print(f"   üéØ –¶–µ–ª—å: {self.api_url}")
        print()
        
        start_time = time.time()
        successful_events = 0
        failed_events = 0
        
        if burst_mode:
            # –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–∞–º–∏
            events_per_batch = max(1, int(rate))
            batch_interval = 1.0 / rate * events_per_batch
            
            while time.time() - start_time < duration:
                batch_start = time.time()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π
                tasks = []
                for _ in range(events_per_batch):
                    event = self.generate_event()
                    task = asyncio.create_task(self.send_event(event))
                    tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞
                results = await asyncio.gather(*tasks, return_exceptions=True)
                successful_events += sum(1 for r in results if r is True)
                failed_events += sum(1 for r in results if r is not True)
                
                # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                elapsed = time.time() - batch_start
                sleep_time = max(0, batch_interval - elapsed)
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
                    
        else:
            # –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            interval = 1.0 / rate
            
            while time.time() - start_time < duration:
                event_start = time.time()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                event = self.generate_event()
                success = await self.send_event(event)
                
                if success:
                    successful_events += 1
                else:
                    failed_events += 1
                
                # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                elapsed = time.time() - event_start
                sleep_time = max(0, interval - elapsed)
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        total_events = successful_events + failed_events
        actual_rate = total_events / total_time if total_time > 0 else 0
        
        print()
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_events}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_events}")
        print(f"   üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
        print(f"   ‚ö° –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞: {actual_rate:.2f} —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")


def load_events_from_file(file_path: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
        if isinstance(data, list):
            return data
        elif isinstance(data, dict) and 'events' in data:
            return data['events']
        else:
            return [data]
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []


async def send_events_from_file(file_path: str, api_url: str = API_URL):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    events = load_events_from_file(file_path)
    if not events:
        return
        
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
    
    async with ThreatEventGenerator(api_url) as generator:
        successful = 0
        failed = 0
        
        for i, event in enumerate(events, 1):
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'timestamp' not in event:
                event['timestamp'] = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")
                
            # –î–æ–±–∞–≤–ª—è–µ–º event_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'event_id' not in event:
                event['event_id'] = f"file-{i:06d}-{int(time.time())}"
            
            success = await generator.send_event(event)
            if success:
                successful += 1
            else:
                failed += 1
                
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            await asyncio.sleep(0.1)
    
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 10 —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
  python log_generator.py --rate 10 --duration 30

  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 50 —Å–æ–±—ã—Ç–∏–π/—Å–µ–∫
  python log_generator.py --rate 50 --duration 60 --burst

  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞
  python log_generator.py --file events.json

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  python log_generator.py --single

  # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  python log_generator.py --rate 100 --duration 120 --burst
        """
    )
    
    # –ì—Ä—É–ø–ø—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    mode_group = parser.add_mutually_exclusive_group(required=True)
    mode_group.add_argument("--rate", type=float, help="–°–æ–±—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %(default)s)")
    mode_group.add_argument("--file", type=str, help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —Å–æ–±—ã—Ç–∏—è–º–∏")
    mode_group.add_argument("--single", action="store_true", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
    
    parser.add_argument("--duration", type=int, default=DEFAULT_DURATION,
                       help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %(default)s)")
    parser.add_argument("--burst", action="store_true",
                       help="–ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏")
    parser.add_argument("--api-url", default=API_URL,
                       help="URL API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %(default)s)")
    
    args = parser.parse_args()
    
    try:
        if args.single:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            async with ThreatEventGenerator(args.api_url) as generator:
                event = generator.generate_event()
                print("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:")
                print(json.dumps(event, ensure_ascii=False, indent=2))
                print()
                
                success = await generator.send_event(event)
                if success:
                    print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è")
                    
        elif args.file:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
            await send_events_from_file(args.file, args.api_url)
            
        elif args.rate:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞
            if args.rate <= 0:
                print("‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
                
            async with ThreatEventGenerator(args.api_url) as generator:
                await generator.generate_stream(args.rate, args.duration, args.burst)
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
