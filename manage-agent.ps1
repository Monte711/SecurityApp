# UECP Agent Management Script
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("start", "stop", "status", "config", "test")]
    [string]$Action = "status",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("simple", "enhanced")]
    [string]$AgentType = "enhanced",
    
    [Parameter(Mandatory=$false)]
    [int]$Interval = 60,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("minimal", "standard", "detailed")]
    [string]$CollectionLevel = "standard"
)

$agentPath = "c:\Users\PC\Desktop\test\agent\windows"
$apiUrl = "http://localhost:8000"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API
function Test-ApiStatus {
    try {
        $response = Invoke-RestMethod -Uri "$apiUrl/health" -TimeoutSec 5
        return $true
    } catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function Get-EventsStats {
    try {
        $response = Invoke-RestMethod -Uri "$apiUrl/stats" -TimeoutSec 5
        return $response
    } catch {
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
function Get-AgentProcesses {
    $processes = @()
    
    # PowerShell –∞–≥–µ–Ω—Ç—ã
    $psAgents = Get-WmiObject Win32_Process | Where-Object { 
        $_.CommandLine -like "*simple_sender.ps1*" -or 
        $_.CommandLine -like "*enhanced_agent.ps1*" 
    }
    
    foreach ($proc in $psAgents) {
        $agentName = if ($proc.CommandLine -like "*simple_sender*") { "Simple Agent" } else { "Enhanced Agent" }
        $processes += @{
            Name = $agentName
            PID = $proc.ProcessId
            StartTime = [System.Management.ManagementDateTimeConverter]::ToDateTime($proc.CreationDate)
            CommandLine = $proc.CommandLine
        }
    }
    
    # Go –∞–≥–µ–Ω—Ç—ã
    $goAgents = Get-Process | Where-Object { $_.ProcessName -like "*uecp-agent*" }
    foreach ($proc in $goAgents) {
        $processes += @{
            Name = "Go Agent"
            PID = $proc.Id
            StartTime = $proc.StartTime
            Path = $proc.Path
        }
    }
    
    return $processes
}

Write-Host "üîß UECP Agent Manager" -ForegroundColor Green
Write-Host "===================" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
Write-Host "`nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API..." -ForegroundColor Cyan
if (Test-ApiStatus) {
    Write-Host "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω ($apiUrl)" -ForegroundColor Green
    
    $stats = Get-EventsStats
    if ($stats) {
        Write-Host "üìä –°–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ: $($stats.total_events)" -ForegroundColor White
        Write-Host "üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: $($stats.unique_hosts)" -ForegroundColor White
    }
} else {
    Write-Host "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($apiUrl)" -ForegroundColor Red
    Write-Host "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: .\start-all.ps1" -ForegroundColor Yellow
}

switch ($Action) {
    "status" {
        Write-Host "`nüìã –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤:" -ForegroundColor Cyan
        $agents = Get-AgentProcesses
        
        if ($agents.Count -eq 0) {
            Write-Host "‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Red
        } else {
            foreach ($agent in $agents) {
                Write-Host "‚úÖ $($agent.Name) (PID: $($agent.PID)) - –∑–∞–ø—É—â–µ–Ω $(([DateTime]::Now - $agent.StartTime).ToString('hh\:mm\:ss')) –Ω–∞–∑–∞–¥" -ForegroundColor Green
            }
        }
        
        Write-Host "`nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:" -ForegroundColor White
        Write-Host "  ‚Ä¢ Simple Agent:    .\manage-agent.ps1 -Action start -AgentType simple" -ForegroundColor Gray
        Write-Host "  ‚Ä¢ Enhanced Agent:  .\manage-agent.ps1 -Action start -AgentType enhanced" -ForegroundColor Gray
    }
    
    "start" {
        Write-Host "`nüöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞..." -ForegroundColor Green
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        $existingAgents = Get-AgentProcesses
        if ($existingAgents.Count -gt 0) {
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤..." -ForegroundColor Yellow
            foreach ($agent in $existingAgents) {
                try {
                    Stop-Process -Id $agent.PID -Force
                    Write-Host "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω $($agent.Name) (PID: $($agent.PID))" -ForegroundColor Green
                } catch {
                    Write-Host "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ $($agent.Name): $_" -ForegroundColor Yellow
                }
            }
            Start-Sleep -Seconds 2
        }
        
        # –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        Set-Location $agentPath
        
        if ($AgentType -eq "simple") {
            Write-Host "üîµ –ó–∞–ø—É—Å–∫ Simple Agent (–∏–Ω—Ç–µ—Ä–≤–∞–ª: $Interval —Å–µ–∫)..." -ForegroundColor Cyan
            Start-Process powershell -ArgumentList "-File", "simple_sender.ps1", "-IntervalSeconds", $Interval
        } else {
            Write-Host "üîµ –ó–∞–ø—É—Å–∫ Enhanced Agent (–∏–Ω—Ç–µ—Ä–≤–∞–ª: $Interval —Å–µ–∫, —É—Ä–æ–≤–µ–Ω—å: $CollectionLevel)..." -ForegroundColor Cyan
            Start-Process powershell -ArgumentList "-File", "enhanced_agent.ps1", "-IntervalSeconds", $Interval, "-CollectionLevel", $CollectionLevel
        }
        
        Start-Sleep -Seconds 3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
        $newAgents = Get-AgentProcesses
        if ($newAgents.Count -gt 0) {
            Write-Host "‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞" -ForegroundColor Red
        }
    }
    
    "stop" {
        Write-Host "`nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤..." -ForegroundColor Red
        $agents = Get-AgentProcesses
        
        if ($agents.Count -eq 0) {
            Write-Host "‚úÖ –ê–≥–µ–Ω—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Green
        } else {
            foreach ($agent in $agents) {
                try {
                    Stop-Process -Id $agent.PID -Force
                    Write-Host "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω $($agent.Name) (PID: $($agent.PID))" -ForegroundColor Green
                } catch {
                    Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ $($agent.Name): $_" -ForegroundColor Red
                }
            }
        }
    }
    
    "test" {
        Write-Host "`nüß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
        
        if (-not (Test-ApiStatus)) {
            Write-Host "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
            return
        }
        
        try {
            $testEvent = @{
                event_id = [System.Guid]::NewGuid().ToString()
                event_type = "test_event"
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
                host = @{
                    host_id = $env:COMPUTERNAME
                    hostname = $env:COMPUTERNAME
                    ip_address = "127.0.0.1"
                    os = "Windows"
                    architecture = "x64"
                }
                agent = @{
                    agent_id = "test-agent"
                    agent_version = "1.0.0"
                }
                data = @{
                    test = $true
                    message = "Test event from agent manager"
                    timestamp = (Get-Date).ToString()
                }
            }
            
            $jsonBody = $testEvent | ConvertTo-Json -Depth 5
            $response = Invoke-RestMethod -Uri "$apiUrl/ingest" -Method POST -ContentType "application/json" -Body $jsonBody
            
            Write-Host "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" -ForegroundColor Green
            Write-Host "üìù Event ID: $($response.event_id)" -ForegroundColor White
            
        } catch {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: $_" -ForegroundColor Red
        }
    }
    
    "config" {
        Write-Host "`n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤:" -ForegroundColor Cyan
        Write-Host "üìç –ü—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º: $agentPath" -ForegroundColor White
        Write-Host "üåê API URL: $apiUrl" -ForegroundColor White
        Write-Host "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $Interval —Å–µ–∫" -ForegroundColor White
        Write-Host "üìä –£—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞: $CollectionLevel" -ForegroundColor White
        
        Write-Host "`nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor White
        Write-Host "  .\manage-agent.ps1 -Action start -AgentType simple" -ForegroundColor Gray
        Write-Host "  .\manage-agent.ps1 -Action start -AgentType enhanced -CollectionLevel detailed" -ForegroundColor Gray
        Write-Host "  .\manage-agent.ps1 -Action stop" -ForegroundColor Gray
        Write-Host "  .\manage-agent.ps1 -Action status" -ForegroundColor Gray
        Write-Host "  .\manage-agent.ps1 -Action test" -ForegroundColor Gray
    }
}
