"""
Shared data schemas for the cybersecurity platform.
All modules use these standardized schemas for data exchange.
"""

from datetime import datetime
from enum import Enum
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field


class EventType(str, Enum):
    """Event types for telemetry data."""
    PROCESS = "process"
    FILE = "file"
    NETWORK = "network"
    AUTH = "authentication"
    VULN_SCAN = "vuln_scan_result"
    THREAT_INTEL = "threat_intel"
    ALERT = "alert"


class SeverityLevel(str, Enum):
    """Severity levels for events and alerts."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class BaseEvent(BaseModel):
    """Base event schema for all telemetry."""
    event_id: str = Field(..., description="Unique event identifier")
    timestamp: datetime = Field(..., description="Event timestamp")
    event_type: EventType = Field(..., description="Type of event")
    source_host: str = Field(..., description="Source hostname")
    source_agent: str = Field(..., description="Agent identifier")
    severity: SeverityLevel = Field(default=SeverityLevel.LOW)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class ProcessEvent(BaseEvent):
    """Process-related event data."""
    event_type: EventType = Field(default=EventType.PROCESS, const=True)
    process_id: int = Field(..., description="Process ID")
    parent_process_id: Optional[int] = Field(None, description="Parent process ID")
    process_name: str = Field(..., description="Process executable name")
    command_line: Optional[str] = Field(None, description="Command line arguments")
    user: Optional[str] = Field(None, description="User executing process")
    file_hash: Optional[str] = Field(None, description="SHA256 hash of executable")


class FileEvent(BaseEvent):
    """File system event data."""
    event_type: EventType = Field(default=EventType.FILE, const=True)
    file_path: str = Field(..., description="Full file path")
    file_hash: Optional[str] = Field(None, description="SHA256 hash")
    file_size: Optional[int] = Field(None, description="File size in bytes")
    operation: str = Field(..., description="File operation (create, modify, delete)")
    process_id: Optional[int] = Field(None, description="Process that performed operation")


class NetworkEvent(BaseEvent):
    """Network activity event data."""
    event_type: EventType = Field(default=EventType.NETWORK, const=True)
    source_ip: str = Field(..., description="Source IP address")
    dest_ip: str = Field(..., description="Destination IP address")
    source_port: Optional[int] = Field(None, description="Source port")
    dest_port: Optional[int] = Field(None, description="Destination port")
    protocol: str = Field(..., description="Network protocol")
    bytes_sent: Optional[int] = Field(None, description="Bytes transmitted")
    bytes_received: Optional[int] = Field(None, description="Bytes received")


class AuthEvent(BaseEvent):
    """Authentication event data."""
    event_type: EventType = Field(default=EventType.AUTH, const=True)
    user: str = Field(..., description="Username")
    auth_type: str = Field(..., description="Authentication type")
    success: bool = Field(..., description="Authentication success")
    source_ip: Optional[str] = Field(None, description="Source IP address")
    session_id: Optional[str] = Field(None, description="Session identifier")


class VulnScanResult(BaseEvent):
    """Vulnerability scan result."""
    event_type: EventType = Field(default=EventType.VULN_SCAN, const=True)
    target: str = Field(..., description="Scan target (IP/hostname)")
    vulnerability_id: str = Field(..., description="CVE or vulnerability ID")
    vulnerability_name: str = Field(..., description="Vulnerability name")
    cvss_score: Optional[float] = Field(None, description="CVSS score")
    description: Optional[str] = Field(None, description="Vulnerability description")
    solution: Optional[str] = Field(None, description="Remediation solution")


class ThreatIntelEvent(BaseEvent):
    """Threat intelligence indicator."""
    event_type: EventType = Field(default=EventType.THREAT_INTEL, const=True)
    indicator_type: str = Field(..., description="IOC type (ip, domain, hash, etc.)")
    indicator_value: str = Field(..., description="IOC value")
    threat_type: str = Field(..., description="Threat classification")
    confidence: int = Field(..., ge=0, le=100, description="Confidence level (0-100)")
    source: str = Field(..., description="Intelligence source")


class Alert(BaseEvent):
    """Security alert generated by analysis."""
    event_type: EventType = Field(default=EventType.ALERT, const=True)
    alert_name: str = Field(..., description="Alert name/title")
    description: str = Field(..., description="Alert description")
    rule_id: Optional[str] = Field(None, description="Detection rule ID")
    related_events: List[str] = Field(default_factory=list, description="Related event IDs")
    recommended_actions: List[str] = Field(default_factory=list, description="Suggested responses")


class IngestResponse(BaseModel):
    """Response from ingest API."""
    success: bool = Field(..., description="Ingestion success status")
    event_id: str = Field(..., description="Event ID that was processed")
    message: str = Field(..., description="Processing message")
    errors: List[str] = Field(default_factory=list, description="Any validation errors")


class PlaybookExecution(BaseModel):
    """SOAR playbook execution request."""
    playbook_id: str = Field(..., description="Playbook identifier")
    target_host: Optional[str] = Field(None, description="Target host for execution")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Execution parameters")
    triggered_by: str = Field(..., description="User or system that triggered execution")
    approval_required: bool = Field(default=True, description="Whether approval is needed")
